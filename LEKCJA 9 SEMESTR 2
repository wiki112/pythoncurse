projekt:
import pygame
import random
import time
from Kierunek import Kierunek
from Waz import Waz
from Jablko import Jablko

#szerokość i wysokość ekranu
SZEROKOSC_EKRANU = 800
WYSOKOSC_EKRANU = 608
punkty = 0
#stworzenie tla
tlo = pygame.Surface((SZEROKOSC_EKRANU, WYSOKOSC_EKRANU))
for i in range(25):
    for j in range(19):
        obraz = pygame.image.load("images/background.png")
        maska = (random.randrange(0, 20), random.randrange(0,20), random.randrange(0,20))
       
        obraz.fill(maska, special_flags=pygame.BLEND_ADD)
        tlo.blit(obraz, (i*32, j*32))

#ustawienia
pygame.init()
#obiekt ekranu i zegara
ekran = pygame.display.set_mode([SZEROKOSC_EKRANU, WYSOKOSC_EKRANU])
zegar = pygame.time.Clock()
moja_czcionka = pygame.font.SysFont('Comic Sans Ms', 24)
#Wąż
waz = Waz()
PORUSZ_WEZEM = pygame.USEREVENT + 1
event_timer = 200
pygame.time.set_timer(PORUSZ_WEZEM, event_timer)

#jabłka
jablko = Jablko()
jablka = pygame.sprite.Group()
jablka.add(jablko)

gra_dziala = True
while gra_dziala:
    for zdarzenie in pygame.event.get():
        if zdarzenie.type == pygame.KEYDOWN:
            if zdarzenie.key == pygame.K_ESCAPE:
                gra_dziala = False
            if zdarzenie.key == pygame.K_w:
                waz.zmien_kierunek(Kierunek.GORA)
            if zdarzenie.key == pygame.K_s:
                waz.zmien_kierunek(Kierunek.DOL)
            if zdarzenie.key == pygame.K_a:
                waz.zmien_kierunek(Kierunek.LEWO)
            if zdarzenie.key == pygame.K_d:
                waz.zmien_kierunek(Kierunek.PRAWO)
            if zdarzenie.key == pygame.K_o:
                event_timer +=10
                pygame.time.set_timer(PORUSZ_WEZEM, event_timer)
            if zdarzenie.key == pygame.K_p:
                event_timer -=10
                pygame.time.set_timer(PORUSZ_WEZEM, event_timer)

        elif zdarzenie.type == PORUSZ_WEZEM:
            waz.aktualizuj()
        elif zdarzenie.type == pygame.QUIT:
            gra_dziala = False
        

    kolizja_z_jablkiem = pygame.sprite.spritecollideany(waz, jablka)

    if kolizja_z_jablkiem != None:
        kolizja_z_jablkiem.kill()
        waz.jedz_jablko()
        punkty += 1
        jablko = Jablko()
        jablka.add(jablko)
    
    #rysowanie tła
    ekran.blit(tlo, (0, 0))

    waz.rysuj_segmenty(ekran)
    #rysowanie glłowy węża
    ekran.blit(waz.obraz, waz.rect)
    #rysowanie jablek
    for jablko in jablka:
        ekran.blit(jablko.obraz, jablko.rect)

    tekst_z_wynikiem = moja_czcionka.render(f"Wynik: {punkty}", False, (0,0,0))
    ekran.blit(tekst_z_wynikiem, (16, 16))
    if waz.sprawdz_kolizje():
        gra_dziala = False
    pygame.display.flip()
    zegar.tick(30)

time.sleep(3)
pygame.quit()

waz:
import pygame
import copy
from Kierunek import Kierunek
from segment import Segment

class Waz(pygame.sprite.Sprite):
    def __init__(self):
        #oryginalny obraz glowy
        self.oryginalny_obraz = pygame.image.load("images/head.png")
        #obraz pomocniczny, bedzie sie on zmienial przy zmienie kierunku gracza
        self.obraz = pygame.transform.rotate(self.oryginalny_obraz, 0)
        #wspolrzednie glowy
        self.rect = self.obraz.get_rect(center=(12*32+16, 9*32+16))
        #zmienne odpowiedzialne za kierunek, oraz nowy wyznaczony kierunek
        self.kierunek = Kierunek.GORA
        self.nowy_kierunek = Kierunek.GORA

        self.ostatnia_pozycja = self.rect

        self.dodaj_segment = False

        self.segmenty = []



    def zmien_kierunek(self, kierunek):
        zmiana_mozliwa = True
        if kierunek == Kierunek.GORA and self.kierunek == Kierunek.DOL:
            zmiana_mozliwa = False
        if kierunek == Kierunek.DOL and self.kierunek == Kierunek.GORA:
            zmiana_mozliwa = False
        if kierunek == Kierunek.LEWO and self.kierunek == Kierunek.PRAWO:
            zmiana_mozliwa = False
        if kierunek == Kierunek.PRAWO and self.kierunek == Kierunek.LEWO:
            zmiana_mozliwa = False
        if zmiana_mozliwa: 
            self.nowy_kierunek = kierunek
    def sprawdz_kolizje(self):
        
        for segment in self.segmenty:
            if self.rect.topleft == segment.pozycja.topleft:

                return True
        if self.rect.top < 0 or self.rect.top >= 608:
            return True
        if self.rect.left < 0 or self.rect.left >= 800:
            return True
        return False
segmenty:
import pygame
import copy

class Segment(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz =pygame.image.load("images/segment.png")
        self.pozycja = pygame.Rect(-32, -32, 32 ,32)
        self.ostatnia_pozycja = None

    def przesun(self, nowaPozycja):
        self.ostatnia_pozycja = copy.deepcopy(nowaPozycja)
jablko:
import pygame
import random

class Jablko(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.obraz = pygame.image.load("images/apple.png")
        self.rect = pygame.Rect(random.randint(0,24)*32, random.randint(0,18)*32, 32, 32)
